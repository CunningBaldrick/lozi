with Interfaces.C;

package body Integers.IO is

   use Smart_Pointers;

   -----------
   -- Parse --
   -----------

   function Parse (Source : String) return Integer_Type is
      function mpz_set_str (
         op   : in out mpz_t;
         src  : in     Interfaces.C.char_array;
         base : in     Integer
      ) return Integer;
      pragma Import (C, mpz_set_str, "__gmpz_set_str");

      procedure MPZ_Parse (Target : in out mpz_t);
      procedure MPZ_Parse (Target : in out mpz_t) is
      begin
         if mpz_set_str (Target, Interfaces.C.To_C (Source), 10) /= 0 then
            raise Constraint_Error with "Invalid integer: " & Source;
         end if;
      end MPZ_Parse;

      procedure Do_Parse is new Access_Contents (MPZ_Parse);
   begin
      return Result : constant Integer_Type := Allocate (0) do
         Do_Parse (Smart_Pointer_Type (Result));
      end return;
   end Parse;

   ---------
   -- Put --
   ---------

   procedure Put (Source : Integer_Type) is
      procedure MPZ_Put (Source : in out mpz_t);
      procedure MPZ_Put (Source : in out mpz_t) is
         type void_pointer is access Character;
         pragma Convention (C, void_pointer);

         procedure mpz_out_str (
           Result :    out Interfaces.C.size_t;
           stream : in     void_pointer;
           base   : in     Integer;
           op     : in     mpz_t
         );
         pragma Import (C, mpz_out_str, "__gmpz_out_str");
         pragma Import_Valued_Procedure (mpz_out_str);

         Result : Interfaces.C.size_t;
      begin
         mpz_out_str (Result, null, 10, Source);
      end MPZ_Put;

      procedure Do_Put is new Access_Contents (MPZ_Put);
   begin
      Do_Put (Smart_Pointer_Type (Source));
   end Put;

end Integers.IO;
